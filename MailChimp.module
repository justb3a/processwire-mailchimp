<?php namespace ProcessWire;

use \DrewM\MailChimp\MailChimp as MailChimpLib;

/**
 * MailChimp
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 3.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <info@justonestep.de>
 * @version 0.0.1
 * @copyright Copyright (c) 2017 justonestep.de, <info@justonestep.de>
 * @see https://github.com/justb3a/processwire-mailchimp
 * @see http://www.processwire.com
 */

/**
 * Class MailChimp
 */
class MailChimp extends WireData implements Module, ConfigurableModule {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'MailChimp',
      'summary' => 'Add subscriptions to MailChimp lists.',
      'version' => 001,
      'href' => 'https://github.com/justb3a/processwire-mailchimp',
      'icon' => 'reddit-alien'
    );
  }

  /**
   * Initialize the module
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   */
  public function init() {
    require_once(wire('config')->paths->{$this->className} . 'vendor/autoload.php');
    $this->state = 'init';
    $this->msg = '';
  }

  /**
   * Get Form, Process State and Message
   *
   * Returns object including form, state and message
   * Form Obj could be used to render markup at your own
   * Make sure to include CSRF Token
   * Please use the `render` method if you're not sure how to handle this
   *
   * @return object
   */
  public function getForm() {
    $form = $this->modules->get('InputfieldForm');
    $form->action = './';
    $form->method = 'post';
    $form->class = 'form__mailchimp';
    $form->attr('id+name','mailchimp');

    foreach (array($this->emailField, $this->firstnameField, $this->lastnameField) as $fieldname) {
      if ($fieldname && $field = $this->fields->get($fieldname)) {
        $inputfield = $field->getInputfield($this->page);
        $form->append($inputfield);
      }
    }

    $this->addFields($form);

    $submit = $this->modules->get('InputfieldSubmit');
    $submit->attr('id+name', 'subscribe');
    $submit->attr('class', 'button');
    $submit->attr('value', $this->_('Subscribe'));
    $form->append($submit);

    // on form submit
    if ($this->input->post->subscribe) {
      $form->processInput($this->input->post);
      if (!$form->getErrors()) {
        $this->subscribe($form);
      } else {
        $this->state = 'error';
        $this->msg = $this->_('There were errors, please fix.');
      }
    }

    return (object) array(
      'form' => $form,
      'state' => $this->state,
      'msg' => $this->msg
    );
  }

  /**
   * Render Form including messages
   *
   * @return string
   */
  public function render() {
    $mc = $this->getForm();
    $msg = "<p class='message message--{$mc->state}'>{$mc->msg}</p>";
    $out = '';

    if ($mc->state !== 'init') $out .= $msg;
    if ($mc->state !== 'success') $out .= $mc->form->render();

    return $out;
  }

  /**
   * Subscribe to MailChimp list
   *
   * @param InputfieldForm $form
   */
  private function subscribe($form) {
    // collect data
    $email = $this->sanitizer->email($form->get($this->emailField)->value);
    $data = array(
      'email_address' => $email,
      'status' => $this->status
    );

    $mergeFields = array();
    $addFields = array('FNAME' => $this->firstnameField, 'LNAME' => $this->lastnameField);
    foreach ($addFields as $key => $fieldname) {
      if ($fieldname && $field = $form->get($fieldname)) {
        if ($val = $this->sanitizer->text($field->value)) $mergeFields[$key] = $val;
      }
    }

    if (count($mergeFields)) $data['merge_fields'] = $mergeFields;

    // subscribe user
    $mailChimp = new MailChimpLib($this->apiKey);
    $result = $mailChimp->post("lists/{$this->apiListId}/members", $this->modifyData($data));

    // handle result
    if ($mailChimp->success()) {
      $this->log->message("[MailChimp]: User $email subscribed to MailChimp.");
      $this->state = 'success';
      $this->msg = $this->_('Thank you, you have been subscribed!');
    } else {
      $this->log->error('[MailChimp]: ' . $mailChimp->getLastError());
      $this->state = 'error';
      $this->msg = $this->_('An error occured, please try again later.');
      $errorBody = json_decode($mailChimp->getLastResponse()['body']);

      if ($errorBody->status === 400 && $errorBody->title === 'Member Exists') {
        $this->msg = $this->_('This email address is already subscribed.');
      }
    }
  }

  /**
   * Hookable method called before the form is rendered
   * Adds possibility to add custom fields
   *
   * @param InputfieldForm $form
   */
  protected function ___addFields($form) {}

  /**
   * Hookable method called before the form is processed
   * Adds possibility to modify data before subscribing
   *
   * Find the full list of fields available in the List Member Schema.
   * @see: https://api.mailchimp.com/schema/3.0/Lists/Members/Instance.json
   *
   * Example:
   * > $this->addHookAfter('MailChimp::modifyData', $this, 'hookModifyData');
   * > public function hookModifyData(HookEvent $event) {
   * >   $data = $event->arguments(0);
   * >   $data['interests'] = ['2s3a384h' => true];
   * >   $event->return = $data;
   * > }
   *
   * @param array $data
   * @return array
   */
  protected function ___modifyData($data) {
    return $data;
  }

}
